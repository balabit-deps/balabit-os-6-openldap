Description: Fix use after free with GnuTLS
  Patch for LP 1557248 (OpenLDAP commit 283f3ae1713df449cc170965b311b19157f7b7ea)
Author: Maciej Puzio <maciej@work.swmed.edu>
Origin: OpenLDAP, http://www.openldap.org/devel/gitweb.cgi?p=openldap.git;a=patch;h=283f3ae1713df449cc170965b311b19157f7b7ea
Bug: http://www.openldap.org/its/index.cgi/Software%20Bugs?id=8385
Bug-Ubuntu: https://bugs.launchpad.net/ubuntu/+source/openldap/+bug/1557248

--- openldap-2.4.42+dfsg.orig/libraries/libldap/tls_g.c
+++ openldap-2.4.42+dfsg/libraries/libldap/tls_g.c
@@ -47,11 +47,11 @@
 #define DH_BITS	(1024)
 
 typedef struct tlsg_ctx {
-	struct ldapoptions *lo;
 	gnutls_certificate_credentials_t cred;
 	gnutls_dh_params_t dh_params;
 	unsigned long verify_depth;
 	int refcount;
+	int reqcert;
 	gnutls_priority_t prios;
 #ifdef LDAP_R_COMPILE
 	ldap_pvt_thread_mutex_t ref_mutex;
@@ -143,7 +143,6 @@ tlsg_ctx_new ( struct ldapoptions *lo )
 
 	ctx = ber_memcalloc ( 1, sizeof (*ctx) );
 	if ( ctx ) {
-		ctx->lo = lo;
 		if ( gnutls_certificate_allocate_credentials( &ctx->cred )) {
 			ber_memfree( ctx );
 			return NULL;
@@ -316,6 +315,9 @@ tlsg_ctx_init( struct ldapoptions *lo, s
 		gnutls_dh_params_init(&ctx->dh_params);
 		gnutls_dh_params_generate2(ctx->dh_params, DH_BITS);
 	}
+
+	ctx->reqcert = lo->ldo_tls_require_cert;
+
 	return 0;
 }
 
@@ -337,10 +339,10 @@ tlsg_session_new ( tls_ctx * ctx, int is
 	
 	if ( is_server ) {
 		int flag = 0;
-		if ( c->lo->ldo_tls_require_cert ) {
+		if ( c->reqcert ) {
 			flag = GNUTLS_CERT_REQUEST;
-			if ( c->lo->ldo_tls_require_cert == LDAP_OPT_X_TLS_DEMAND ||
-				c->lo->ldo_tls_require_cert == LDAP_OPT_X_TLS_HARD )
+			if ( c->reqcert == LDAP_OPT_X_TLS_DEMAND ||
+				c->reqcert == LDAP_OPT_X_TLS_HARD )
 				flag = GNUTLS_CERT_REQUIRE;
 			gnutls_certificate_server_set_request( session->session, flag );
 		}
@@ -355,17 +357,17 @@ tlsg_session_accept( tls_session *sessio
 	int rc;
 
 	rc = gnutls_handshake( s->session );
-	if ( rc == 0 && s->ctx->lo->ldo_tls_require_cert != LDAP_OPT_X_TLS_NEVER ) {
+	if ( rc == 0 && s->ctx->reqcert != LDAP_OPT_X_TLS_NEVER ) {
 		const gnutls_datum_t *peer_cert_list;
 		unsigned int list_size;
 
 		peer_cert_list = gnutls_certificate_get_peers( s->session, 
 						&list_size );
-		if ( !peer_cert_list && s->ctx->lo->ldo_tls_require_cert == LDAP_OPT_X_TLS_TRY ) 
+		if ( !peer_cert_list && s->ctx->reqcert == LDAP_OPT_X_TLS_TRY )
 			rc = 0;
 		else {
 			rc = tlsg_cert_verify( s );
-			if ( rc && s->ctx->lo->ldo_tls_require_cert == LDAP_OPT_X_TLS_ALLOW )
+			if ( rc && s->ctx->reqcert == LDAP_OPT_X_TLS_ALLOW )
 				rc = 0;
 		}
 	}
